package com.mycompany.xmlprograma;

import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

class Persona {
    String nombre;
    int edad;
    String ciudad;

    public Persona(String nombre, int edad, String ciudad) {
        this.nombre = nombre;
        this.edad = edad;
        this.ciudad = ciudad;
    }
}

public class XMLPrograma {

    static final String ARCHIVO_XML = "personas.xml";

    public static void main(String[] args) {
        // Crear arreglo
        Persona[] personas = {
            new Persona("Ana", 25, "Lima"),
            new Persona("Luis", 30, "Bogotá"),
            new Persona("Sofía", 22, "Quito")
        };

        // Escribir XML
        escribirXML(personas);

        // Leer XML
        List<Persona> listaLeida = leerXML();

        // Mostrar los datos leídos
        System.out.println("Datos leídos desde XML:");
        for (Persona p : listaLeida) {
            System.out.println(p.nombre + " - " + p.edad + " - " + p.ciudad);
        }
    }

    public static void escribirXML(Persona[] personas) {
        try {
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.newDocument();

            Element rootElement = doc.createElement("personas");
            doc.appendChild(rootElement);

            for (Persona p : personas) {
                Element persona = doc.createElement("persona");

                Element nombre = doc.createElement("nombre");
                nombre.appendChild(doc.createTextNode(p.nombre));
                persona.appendChild(nombre);

                Element edad = doc.createElement("edad");
                edad.appendChild(doc.createTextNode(String.valueOf(p.edad)));
                persona.appendChild(edad);

                Element ciudad = doc.createElement("ciudad");
                ciudad.appendChild(doc.createTextNode(p.ciudad));
                persona.appendChild(ciudad);

                rootElement.appendChild(persona);
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();

            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(ARCHIVO_XML));

            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.transform(source, result);

            System.out.println("Archivo XML escrito exitosamente.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static List<Persona> leerXML() {
        List<Persona> personas = new ArrayList<>();

        try {
            File xmlFile = new File(ARCHIVO_XML);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xmlFile);

            doc.getDocumentElement().normalize();

            NodeList nodeList = doc.getElementsByTagName("persona");

            for (int i = 0; i < nodeList.getLength(); i++) {
                Node nodo = nodeList.item(i);
                if (nodo.getNodeType() == Node.ELEMENT_NODE) {
                    Element elem = (Element) nodo;

                    String nombre = elem.getElementsByTagName("nombre").item(0).getTextContent();
                    int edad = Integer.parseInt(elem.getElementsByTagName("edad").item(0).getTextContent());
                    String ciudad = elem.getElementsByTagName("ciudad").item(0).getTextContent();

                    personas.add(new Persona(nombre, edad, ciudad));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return personas;
    }
}
